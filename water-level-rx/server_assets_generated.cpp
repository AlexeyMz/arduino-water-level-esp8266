#include "server_assets.h"

const char ASSET_0[] PROGMEM = R"rawliteral(const t=document.querySelector.bind(document);document.addEventListener("DOMContentLoaded",()=>{function s(e){const a=e.getAttribute("data-tab");a&&(document.querySelectorAll(".tab-content, .tab").forEach(n=>n.classList.remove("active")),document.getElementById(a).classList.add("active"),e.classList.add("active"))}t(".tabs").addEventListener("click",e=>{e.target instanceof HTMLElement&&s(e.target)}),s(t(".tab:first-child"));async function r(e,a){const n=await fetch(e,a);if(!n.ok)throw new Error(`Request failed: ${n.status} ${n.statusText}`);return await n.json()}setInterval(async()=>{try{const e=await r("/sensor");t("#sensor-value").innerText=e.depth.toFixed(2),t("#sensor-raw").innerText=e.rawPressure.toFixed(4),t("#sensor-count").innerText=e.sampleCount,t("#sensor-interval").innerText=e.sampleInterval,t("#sensor-error").innerText=""}catch(e){t("#sensor-error").innerText=e.message}},500),async function(){try{const e=await r("/connect-settings");t("#connect-ssid").value=e.ssid,t("#connect-pass").value=e.password,t("#connect-error").innerText=""}catch(e){t("#connect-error").innerText=e.message}}(),async function(){try{const e=await r("/calibration");t("#calibrate-coeff").value=e.kCoeff,t("#calibrate-offset").value=e.pZero,t("#calibrate-error").innerText=""}catch(e){t("#calibrate-error").innerText=e.message}}()});
)rawliteral";

const char ASSET_1[] PROGMEM = R"rawliteral(<!DOCTYPE html><html><head><meta name="viewport" content="width=device-width,initial-scale=1"><title>Water Level RX</title><script type="module" crossorigin src="/assets/index-CsmTtDXc.js"></script></head><body><style type="text/css">.main{display:flex;flex-direction:column;align-items:center}.tabs{display:flex;padding:0}.tab{list-style-type:none;margin:0 5px;padding:2px;border:1px solid gray;cursor:pointer}.tab.active{background:#7fffd4}.tab-content{visibility:collapse;display:flex;flex-direction:column}.tab-content.active{visibility:visible}form{display:flex;flex-direction:column}form>input{margin-bottom:5px}.error{color:red}</style><div class="main"><h2>Water Level RX</h2><ul class="tabs"><li class="tab" data-tab="sensor-tab">Sensor</li><li class="tab" data-tab="connect-tab">Connect</li><li class="tab" data-tab="calibrate-tab">Calibrate</li></ul><section id="sensor-tab" class="tab-content"><h3>Sensor</h3><div>Depth: <span id="sensor-value">&mdash;</span>&nbsp;m</div><div>Raw pressure: <span id="sensor-raw">&mdash;</span></div><div>Sample count: <span id="sensor-count">&mdash;</span></div><div>Sample interval: <span id="sensor-interval">&mdash;</span>&nbsp;ms</div><div class="error" id="sensor-error"></div></section><section id="connect-tab" class="tab-content"><h3>Connect</h3><form method="POST" action="/connect" autocomplete="off"><label for="connect-ssid">SSID:</label> <input type="text" id="connect-ssid" name="ssid"> <label for="connect-pass">Password:</label> <input type="text" id="connect-pass" name="password"> <input type="submit" value="Connect"></form><div class="error" id="connect-error"></div></section><section id="calibrate-tab" class="tab-content"><h3>Calibrate</h3><p><code>h = (p - p0) / k</code></p><p>where <b>p</b> is measured pressure, <b>h</b> is computed depth.</p><form method="POST" action="/calibration" autocomplete="off"><label for="calibrate-coeff"><b>k</b> (&#x3c1;&times;g) (default: 120):</label> <input type="number" id="calibrate-coeff" name="kCoeff" min="1" max="1000" step="0.0001"> <label for="calibrate-offset"><b>p0</b> (default: 100):</label> <input type="number" id="calibrate-offset" name="pZero" min="-1000" max="1000" step="0.0001"> <input type="submit" value="Apply"></form><div class="error" id="calibrate-error"></div></section></div></body></html>)rawliteral";

AssetInfo::AssetInfo() {
  entryCount = 2;
  entries = new AssetEntry[2] {
    { "assets/index-CsmTtDXc.js", "text/javascript", ASSET_0 },
    { "index.html", "text/html", ASSET_1 },
  };
}
